# This workflow is a reusable one called by other workflows
name: (template) Elemental CAPI E2E single cluster CLI tests

on:
  workflow_call:
    # Variables to set when calling this reusable workflow
    inputs:
      boot_type:
        required: true
        type: string
      bootstrap_provider:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      cluster_namespace:
        required: true
        type: string
      control_plane_provider:
        required: true
        type: string
      destroy_runner:
        required: true
        type: boolean
      k8s_downstream_version:
        required: true
        type: string
      k8s_upstream_version:
        required: true
        type: string
      node_number:
        required: true
        type: string
      operator_repo:
        required: true
        type: string
      public_domain:
        required: true
        type: string
      public_fqdn:
        required: true
        type: string
      qase_project_code:
        required: true
        type: string
      qase_run_id:
        required: true
        type: string
      runner_label:
        required: true
        type: string
      test_type:
        required: true
        type: string

    # Job outputs to export for caller workflow
    outputs:
      steps_status:
        description: Status of the executed test jobs
        value: ${{ jobs.cli.outputs.steps_status }}

    # Variables to set when calling this reusable workflow
    secrets:
      credentials:
        required: true
      qase_api_token:

jobs:
  cli:
    runs-on: ${{ inputs.runner_label }}
    outputs:
      # For this to work 'id:' in steps are mandatory!
      steps_status: ${{ join(steps.*.conclusion, ' ') }}
    env:
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      CLUSTER_NS: ${{ inputs.cluster_namespace }}
      # QASE variables
      QASE_API_TOKEN: ${{ secrets.qase_api_token }}
      QASE_PROJECT_CODE: ${{ inputs.qase_project_code }}
      QASE_RUN_ID: ${{ inputs.qase_run_id }}
      # K3S / RKE2 flags to use for installation
      K3S_KUBECONFIG_MODE: 0644
      # Distribution to use for the management node
      K8S_UPSTREAM_VERSION: ${{ inputs.k8s_upstream_version }}
      # Distribution to use for the downstream cluster
      K8S_DOWNSTREAM_VERSION: ${{ inputs.k8s_downstream_version }}
      TEST_TYPE: ${{ inputs.test_type }}
      TIMEOUT_SCALE: 3
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      
      - name: Checkout elemental capi provider repo
        uses: actions/checkout@v4
        with:
          repository: rancher-sandbox/cluster-api-provider-elemental
          path: cluster-api-provider-elemental
          ref: debug_branch

      - name: Setup Go
        id: setup_go
        uses: actions/setup-go@v5
        with:
          cache-dependency-path: tests/go.sum
          go-version-file: tests/go.mod

      # TODO: Add the package into the image itself
      - name: Install missing package
        id: install_packages
        run: sudo zypper in -y yq

      - name: Authenticate to GCP
        id: authenticate
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.credentials }}

      - name: Setup gcloud
        id: setup_gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Download QCOW2 VM image
        id: download_qcow2
        run: |
          QCOW2_FILE="rancher-image.qcow2"
          gcloud storage cp gs://elemental-airgap-image/${QCOW2_FILE} ${HOME}/${QCOW2_FILE}

      - name: Define needed system variables
        id: define_sys_vars
        run: |
          # Add missing PATH, removed in recent distributions for security reasons...
          echo "/usr/local/bin" >> ${GITHUB_PATH}

      - name: Create management host with K3s installed
        id: create_management_host
        run: cd tests && make e2e-install-mgmt-host

      - name: Install CAPI components
        id: install_capi
        run: cd tests && make e2e-install-capi
        env:
          BOOTSTRAP_PROVIDER: ${{ inputs.bootstrap_provider }}
          CLUSTER_NAME: ${{ inputs.cluster_name }}
          CONTROL_PLANE_ENDPOINT_HOST: "\"192.168.122.50\""
          CONTROL_PLANE_PROVIDER: ${{ inputs.control_plane_provider }}
          ELEMENTAL_ENABLE_DEBUG: "\"true\""
          ELEMENTAL_API_ENDPOINT: "\"management-host\""
          ELEMENTAL_API_ENABLE_TLS: "\"true\""
          ELEMENTAL_ENABLE_DEFAULT_CA: "\"true\""
          OPERATOR_TYPE: "capi"
          
      - name: Build the ISO image
        id: build_iso
        run: |
          cd cluster-api-provider-elemental 
          if ${{ contains(inputs.bootstrap_provider, 'kubeadm') }}; then
            AGENT_CONFIG_FILE=iso/config/my-config.yaml make build-iso-kubeadm
          else
            AGENT_CONFIG_FILE=iso/config/my-config.yaml make build-iso
          fi

      - name: Extract iPXE artifacts from ISO
        id: extract_ipxe_artifacts
        if: ${{ inputs.boot_type == 'pxe' }}
        run: cd tests && make extract_kernel_init_squash && make ipxe

      - name: Bootstrap node 1 (control plane), 2 and 3 (workers) (use Emulated TPM if possible)
        id: bootstrap_master_nodes
        env:
          EMULATE_TPM: true
          VM_START: 1
          VM_END: 3
        run: |
          # Only use ISO boot if the upstream cluster is K3S
          # due to issue with pxe, dhcp traffic
          # Set RAM to 10GB for RKE2 and vCPU to 6, a bit more than the recommended values
          if ${{ contains(inputs.k8s_upstream_version, 'k3s') }}; then
            export BOOT_TYPE=iso
            export VM_MEM=10240
            export VM_CPU=6
          fi

          # Execute bootstrapping test
          cd tests && VM_INDEX=${VM_START} VM_NUMBERS=${VM_END} make e2e-bootstrap-node

      - name: Extract component versions/informations
        id: component
        run: |
          # Extract elemental controller manager version
          ELEMENTAL_CONTROLLER=$(kubectl get pod \
                               --namespace elemental-system \
                               -l control-plane=controller-manager \
                               -o jsonpath={.items[*].status.containerStatuses[1].image} 2> /dev/null || true)

          # Export values
          echo "elemental_controller_manager_version=${ELEMENTAL_CONTROLLER}" >> ${GITHUB_OUTPUT}

          # TODO: Extract more info about CAPI components
#
#      - name: Extract iPXE artifacts from ISO
#        id: extract_ipxe_artifacts
#        if: ${{ inputs.boot_type == 'pxe' }}
#        run: cd tests && make extract_kernel_init_squash && make ipxe

#      - name: Extract ISO version
#        id: iso_version
#        if: ${{ always() }}
#        run: |
#          # Extract OS version from ISO
#          ISO=$(file -Ls *.iso 2>/dev/null | awk -F':' '/boot sector/ { print $1 }')
#          if [[ -n "${ISO}" ]]; then
#            # NOTE: always keep 'initrd' at the end, as there is always a link with this name
#            for INITRD_NAME in elemental.initrd* initrd; do
#              INITRD_FILE=$(isoinfo -i ${ISO} -R -find -type f -name ${INITRD_NAME} -print 2>/dev/null)
#              if [[ -n "${INITRD_FILE}" ]]; then
#                isoinfo -i ${ISO} -R -x ${INITRD_FILE} 2>/dev/null \
#                  | xz -dc \
#                  | cpio -i --to-stdout usr/lib/initrd-release > os-release
#                eval $(grep IMAGE_TAG os-release 2>/dev/null)
#
#                # We found an initrd, stop here
#                break
#              fi
#            done
#          fi
#
      # This step must be called in each worklow that wants a summary!
      - name: Get logs and add summary
        id: logs_summary
        if: ${{ always() }}
        uses: ./.github/actions/logs-and-summary
        with:
          k8s_downstream_version: ${{ inputs.k8s_downstream_version }}
          k8s_upstream_version: ${{ inputs.k8s_upstream_version }}
          node_number: ${{ inputs.node_number }}
          public_fqdn: ${{ inputs.public_fqdn }}
          test_type: ${{ inputs.test_type }}
